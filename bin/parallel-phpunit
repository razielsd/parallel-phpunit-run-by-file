#!/bin/bash
PID=$$
ROOT="${@: -1}" # last argument
ROOT="${ROOT%/}" # strip the last slash
ARGS="${@:1:$(($#-1))}" # remove last argument
PHPUNIT_ARG=''
CFG_MAX_THREAD=3
CFG_PHPUNIT_CMD='phpunit'
CFG_TEST_MASK="*Test.php"
CFG_VERBOSE=0


function show_help {
    echo "Paralleling options:"
    echo "    --pu-cmd - custom phpunit run script, default $CFG_PHPUNIT_CMD"
    echo "    --pu-thread - max threads, default $CFG_MAX_THREAD"
    echo "    --pu-test-mask - tests file template, default $CFG_TEST_MASK"
    echo "    --pu-verbose - show addional information (0|1), default $CFG_VERBOSE"
    echo "Usage: parallel-phpunit [switches] <directory>"
    echo ""
    exit 1
}

function set_config {
    local pos=`expr index $1 '='`
    local paramName=${1:0:$pos-1}
    local paramValue=${1:$pos}
    case $paramName in
        --pu-thread)
            CFG_MAX_THREAD="$paramValue"
            ;;
        --pu-cmd)
            CFG_PHPUNIT_CMD="$paramValue"
            ;;
        --pu-test-mask)
            CFG_TEST_MASK="$paramValue"
            ;;
        --pu-verbose)
            if [ ! $paramValue -eq 0 ];then
                paramValue=1
            fi
            CFG_VERBOSE="$paramValue"
            ;;
    esac
}


function test_files {
    if [[ $ARGS == *--group* ]];then
        param=$ARGS
        param=${param#*--group}
        param=${param%--*}
        param=${param//,/\\|}
        grep -F -R -s --include=$CFG_TEST_MASK '@group' $ROOT | awk '{ print $1 " " $4}' | grep "$param" | awk '{print $1}' | sed 's/://' | sort | uniq
    else
        find $ROOT -name \*$CFG_TEST_MASK
    fi
}

function replace {
    echo "$1 " | sed "s|--$2[ ][ ]*[^ ][^ ]*|--$2 $3|"
}

# http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
function in_array() {
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}

function child_processes {
    pgrep -P ${PID} | grep -v 'sleep' | wc -l
}

function count {
    grep -o "$1" <<< "$progress" | wc -l | sed 's| *||'
}

function print_summary {
    progress=`find $ROOT -name parallel-phpunit.${PID}.*.log -exec cat {} \; -exec echo \; | grep "^[\.FESI][\.FESI]*$"`
    progress=$progress`find $ROOT -name parallel-phpunit.${PID}.*.log -exec cat {} \; -exec echo \; | grep "^[\.FESI][\.FESI]* " | sed 's| .*||'`
    echo "Success: `count '\.'` Fail: `count F` Error: `count E` Skip: `count S` Incomplete: `count I`"
}

function write_combined_junit {
    mkdir -p `dirname $1`
    echo "<testsuites>" > $1
    find $ROOT -name parallel-phpunit.${PID}.*.junit -exec cat {} \; | grep -v "^<?xml" | grep -v testsuites >> $1
    echo "</testsuites>" >> $1
}

function on_exit {
    pkill -TERM -P ${PID} &
    while [ `child_processes` -gt 1 ]
    do
        sleep 1
    done
    find $ROOT -name parallel-phpunit.${PID}* -delete
}

trap "on_exit" EXIT


function refresh_threads {
    declare -a child_list=("${!1}")
    local active=()
    active=(`pgrep -P ${PID}`)
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        local pid=${child_list[$i]}
        in_array $pid ${active[@]}
        if [ ! $? -eq 0 ];then
            child_list[$i]=0
        fi
        i=`expr $i + 1`
    done
    echo ${child_list[@]}
}


function get_free_thread {
    declare -a child_list=("${!1}")
    local i=0
    while [ $i -lt $CFG_MAX_THREAD ]
    do
        if [ ${child_list[$i]} -eq 0 ];then
            echo $i
            return
        fi
    i=`expr $i + 1`
    done
    echo '-1'
}


echo "Running parallel wrapper for phpunit"

#check parameters

if [ ! -d "$ROOT" ];then
    if [ -f 'phpunit.xml' ];then
        echo "Execute using config file not supported"
    fi
    show_help
    exit 1
fi

#extract extended options
for param in $ARGS
do
    if [ ${param:0:4} = '--pu' ];then
        set_config "$param"
    else
        PHPUNIT_ARG="$PHPUNIT_ARG $param"
    fi
done


# init vars
threads=()
i=0
while [ $i -lt $CFG_MAX_THREAD ]
do
    threads[$i]=0
    i=`expr $i + 1`
done

junit_file=`echo "$PHPUNIT_ARG" | grep "\-\-log-junit " | sed 's|.*--log-junit [ ]*||' | sed 's| .*||'`
if [ $CFG_VERBOSE -eq 1 ];then
    echo "PID: $PID"
fi
#execute tests
i=0
for filename in `test_files`
do
    #check active process
    while [ `child_processes` -gt $CFG_MAX_THREAD ]
    do
        sleep 1
    done
    #extract dir
    dir="$filename"
    if [ -f "$filename" ]; then
        dir=`dirname $filename`
    fi
    i=`expr $i + 1`
    #get free thread number
    threads=( $(refresh_threads threads[@]) )
    thread_id=`get_free_thread threads[@]`
    #execute
    log=$dir/parallel-phpunit.${PID}.${i}.log
    args="`replace "$PHPUNIT_ARG" log-junit $dir/parallel-phpunit.${PID}.${i}.junit` $filename"
    echo "Starting command: phpunit $args thread_id $thread_id"
    (($CFG_PHPUNIT_CMD -d parallel-phpunit-thread=${thread_id} $args || touch $dir/parallel-phpunit.${PID}.${i}.fail) &> $log; echo "Command ended: phpunit $args"; grep -v "parallel-phpunit-pid=" $log) &
    threads[$thread_id]=$!
    if [ $CFG_VERBOSE -eq 1 ];then
        echo "Run test with pid: $!, thread id: $thread_id"
    fi
done

#report progress when some phpunit execution is still running
while [ `child_processes` -gt 1 ]
do
    sleep 2
    print_summary
done

test -z "$junit_file" || write_combined_junit $junit_file
test -z "`find $ROOT -name parallel-phpunit.${PID}.*.fail`"
